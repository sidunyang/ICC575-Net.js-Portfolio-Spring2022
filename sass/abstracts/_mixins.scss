@mixin buildFont($font, $size:20px, $color:violet) {
	font-family: $font;
	font-size: $size;
	color: $color;
}

@mixin breakpoint($value) {
	// need to validate $value

	// if a string use standard breakpoints
	@if type-of($value) == 'string' {
		@if ($value == "xs" or $value == "phone") {
			@media (max-width: 699px) {
				@content;
			}
		}
		@else if ($value == "sm" or $value == "tablet") {
			@media (min-width: 700px) {
				@content;
			}
		}

		@else if ($value == "md" or $value == "laptop") {
			@media(min-width: 980px) {
				@content;
			}
		}
		@else if($value == "lg" or $value == "desktop") {
			@media (min-width: 1140px) {
				@content;
			}
		}

		@else {
			@warn "Breakpoint mixin supports: xs or phone, sm or tablet, md or laptop, lg or desktop, xl or tvscreen as string variables";
		}

	} 
	// if value then use value as minimum width.
	@else if is-length($value){
		@media(min-width: #{$value}){
			@content;
		}
	}

	@else {
		@warn "Breakpoint mixin supports: string variables or relative units";
	}
	// if a length value than use that

	// error warn if string does not match or it is not a length
	
}

$alignItemValues: flex-start, flex-end, center,
stretch, baseline;

@mixin alignItems(){
	@each $value in $alignItemValues {
		&.align-items-#{$value} {
			align-items:$value;
		}
	}
}
$textAlignValues:left,center,right;

@mixin textAligns(){
	@each $value in $textAlignValues {
		&.text-align-#{$value} {
			text-align: $value;
		}
	}
}